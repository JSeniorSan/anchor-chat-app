
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  password              String?
  userFriends           Friend[]    @relation(name: "users")
  // userFriends           Friends[]    @relation(name: "users")
  // friendUserFriends     Friends[]    @relation(name: "friend_users")
  chats                 Chat[]
  message               Message[]
  status                Boolean?
}

model Friend {
  id              String  @id @default(cuid())
  // friendId        String
  // friend          User    @relation(name: "friend_users", fields: [friendId], references: [id])
  user            User?    @relation(name: "users", fields: [userId], references: [id])
  status          Boolean?
  userId          String
  userEmail       String?
  userName        String?
}
// model Friends {
//   id              String  @id @default(cuid())
//   friendId        String
//   friend          User    @relation(name: "friend_users", fields: [friendId], references: [id])
//   user            User    @relation(name: "users", fields: [userId], references: [id])
//   status          Boolean?
//   userId          String
//   userEmail       String?
//   userName        String?
// }

model Chat {
  id       String    @id @default(cuid())
  title    String
  messages Message[]
  members  User[]
}

model Message {
  id         String   @id @default(cuid())
  createdAt DateTime @default(now())
  content    String?
  author     User     @relation(fields: [authorId], references: [id])
  authorId  String
  chat       Chat?    @relation(fields: [chatId], references: [id])
  chatId     String?
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
